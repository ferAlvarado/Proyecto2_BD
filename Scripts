-- FUNCTION: public.insert_customer(smallint, character varying, character varying, character varying, smallint, integer)

-- DROP FUNCTION public.insert_customer(smallint, character varying, character varying, character varying, smallint, integer);

CREATE OR REPLACE FUNCTION public.insert_customer(
	store_ids smallint,
	first_names character varying,
	last_names character varying,
	emails character varying,
	actives integer,
	address01 character varying(50),
    address02 character varying(50),
    districts character varying(20),
    city_ids smallint,
    postal_codes character varying(10),
    phones character varying(20))
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$

 BEGIN
 INSERT INTO public.address(address, address2, district, city_id, postal_code, phone)
	VALUES (address01, address02, districts, city_ids, postal_codes, phones);
 INSERT INTO public.customer(store_id, first_name, last_name, email,address_id,active)
	VALUES (store_ids, first_names, last_names, emails, (SELECT address_id FROM ADDRESS ORDER By address_id DESC LIMIT 1),actives);
END;
$BODY$;

-- FUNCTION: public.insert_rental(integer, smallint, smallint)

-- DROP FUNCTION public.insert_rental(integer, smallint, smallint);

CREATE OR REPLACE FUNCTION public.insert_rental(
	inventory_ids integer,
	customer_ids smallint,
	staff_ids smallint)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$

 BEGIN
INSERT INTO public.rental(rental_date, inventory_id, customer_id, staff_id)
	VALUES (now():: timestamp without time zone, inventory_ids, customer_ids, staff_ids);
END;

$BODY$;

-- FUNCTION: public.register_return(character varying, character varying)

-- DROP FUNCTION public.register_return(character varying, character varying);

CREATE OR REPLACE FUNCTION public.register_return(
	first_names character varying,
	last_names character varying,
	inventory_ids integer)
	
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$

 BEGIN
UPDATE public.rental
	SET return_date=now():: timestamp without time zone,last_update=now():: timestamp without time zone
	WHERE rental.customer_id=(SELECT customer_id FROM CUSTOMER 
							WHERE CUSTOMER.first_name=first_names AND CUSTOMER.last_name=last_names)
							AND rental.inventory_id=inventory_ids;
END;

$BODY$;


-- FUNCTION: public.insert_film(integer, character varying, text, year, smallint, smallint, numeric, smallint, numeric, mpaa_rating, timestamp without time zone, text[], tsvector)

-- DROP FUNCTION public.insert_film(integer, character varying, text, year, smallint, smallint, numeric, smallint, numeric, mpaa_rating, timestamp without time zone, text[], tsvector);

CREATE OR REPLACE FUNCTION public.insert_film(
	film_id integer,
	title character varying,
	description text,
	release_year year,
	language_id smallint,
	rental_duration smallint,
	rental_rate numeric,
	length smallint,
	replacement_cost numeric,
	rating mpaa_rating,
	last_update timestamp without time zone,
	special_features text[],
	fulltext tsvector)
    RETURNS void
    LANGUAGE 'sql'

    COST 100
    VOLATILE 
AS $BODY$

INSERT INTO public.film(
	film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext)
	VALUES (film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext);

$BODY$;

ALTER FUNCTION public.insert_film(integer, character varying, text, year, smallint, smallint, numeric, smallint, numeric, mpaa_rating, timestamp without time zone, text[], tsvector)
    OWNER TO video;

-- FUNCTION: public.insert_inventory(integer, smallint, smallint, timestamp without time zone)

-- DROP FUNCTION public.insert_inventory(integer, smallint, smallint, timestamp without time zone);

CREATE OR REPLACE FUNCTION public.insert_inventory(
	inventory_id integer,
	film_id smallint,
	store_id smallint,
	last_update timestamp without time zone)
    RETURNS void
    LANGUAGE 'sql'

    COST 100
    VOLATILE 
AS $BODY$

INSERT INTO public.inventory(
	inventory_id, film_id, store_id, last_update)
	VALUES (inventory_id, film_id, store_id, last_update);

$BODY$;

ALTER FUNCTION public.insert_inventory(integer, smallint, smallint, timestamp without time zone)
    OWNER TO video;

-- Creacion de roles

-- Role: "EMP"
-- DROP ROLE "EMP";

CREATE ROLE "EMP" WITH
  NOLOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION;
  
-- Role: "ADMIN"
-- DROP ROLE "ADMIN";

CREATE ROLE "ADMIN" WITH
  NOLOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION;

GRANT "EMP" TO "ADMIN";

-- USER: video
-- DROP USER video;

CREATE USER video WITH
  NOLOGIN
  NOSUPERUSER
  INHERIT
  CREATEDB
  CREATEROLE
  NOREPLICATION;
  
-- User: empleado1
-- DROP USER empleado1;

CREATE USER empleado1 WITH
  LOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION
  PASSWORD '1234';

GRANT "EMP" TO empleado1;

-- User: administrador1
-- DROP USER administrador1;

CREATE USER administrador1 WITH
  LOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION
  PASSWORD '1234';

GRANT "ADMIN" TO administrador1;

-- Asignacion de permisos 
GRANT EXECUTE ON FUNCTION insert_customer,insert_rental,register_return,film_in_stock TO "EMP";
GRANT EXECUTE ON FUNCTION insert_customer,insert_film,insert_inventory TO "ADMIN";

--asignacion de due√±o 

ALTER TABLE actor OWNER TO video; 
ALTER TABLE address OWNER TO video; 
ALTER TABLE category OWNER TO video; 
ALTER TABLE city OWNER TO video; 
ALTER TABLE country OWNER TO video; 
ALTER TABLE customer OWNER TO video; 
ALTER TABLE film OWNER TO video; 
ALTER TABLE film_actor OWNER TO video; 
ALTER TABLE film_category OWNER TO video; 
ALTER TABLE inventory OWNER TO video; 
ALTER TABLE language OWNER TO video; 
ALTER TABLE payment OWNER TO video; 
ALTER TABLE rental OWNER TO video; 
ALTER TABLE staff OWNER TO video; 
ALTER TABLE store OWNER TO video; 

ALTER FUNCTION _group_concat OWNER TO video;
ALTER FUNCTION film_in_stock OWNER TO video;
ALTER FUNCTION film_not_in_stock OWNER TO video;
ALTER FUNCTION get_customer_balance OWNER TO video;
ALTER FUNCTION insert_customer OWNER TO video;
ALTER FUNCTION insert_film OWNER TO video;
ALTER FUNCTION insert_inventory OWNER TO video;
ALTER FUNCTION insert_rental OWNER TO video;
ALTER FUNCTION inventory_held_by_customer OWNER TO video;
ALTER FUNCTION inventory_in_stock OWNER TO video;
ALTER FUNCTION last_day OWNER TO video;
ALTER FUNCTION register_return OWNER TO video;
ALTER FUNCTION rewards_report OWNER TO video;


