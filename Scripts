-- FUNCTION: public.insert_customer(smallint, character varying, character varying, character varying, smallint, integer)

-- DROP FUNCTION public.insert_customer(smallint, character varying, character varying, character varying, smallint, integer);

CREATE OR REPLACE FUNCTION public.insert_customer(
	store_ids smallint,
	first_names character varying,
	last_names character varying,
	emails character varying,
	actives integer,
	address01 character varying(50),
    address02 character varying(50),
    districts character varying(20),
    city_ids smallint,
    postal_codes character varying(10),
    phones character varying(20))
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$

 BEGIN
 INSERT INTO public.address(address, address2, district, city_id, postal_code, phone)
	VALUES (address01, address02, districts, city_ids, postal_codes, phones);
 INSERT INTO public.customer(store_id, first_name, last_name, email,address_id,active)
	VALUES (store_ids, first_names, last_names, emails, (SELECT address_id FROM ADDRESS ORDER By address_id DESC LIMIT 1),actives);
END;
$BODY$;

-- FUNCTION: public.insert_rental(integer, smallint, smallint)

-- DROP FUNCTION public.insert_rental(integer, smallint, smallint);

CREATE OR REPLACE FUNCTION public.insert_rental(
	inventory_ids integer,
	customer_ids smallint,
	staff_ids smallint)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$

 BEGIN
INSERT INTO public.rental(rental_date, inventory_id, customer_id, staff_id)
	VALUES (now():: timestamp without time zone, inventory_ids, customer_ids, staff_ids);
END;

$BODY$;

-- FUNCTION: public.register_return(character varying, character varying)

-- DROP FUNCTION public.register_return(character varying, character varying);

CREATE OR REPLACE FUNCTION public.register_return(
	first_names character varying,
	last_names character varying,
	inventory_ids integer)
	
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$

 BEGIN
UPDATE public.rental
	SET return_date=now():: timestamp without time zone,last_update=now():: timestamp without time zone
	WHERE rental.customer_id=(SELECT customer_id FROM CUSTOMER 
							WHERE CUSTOMER.first_name=first_names AND CUSTOMER.last_name=last_names)
							AND rental.inventory_id=inventory_ids;
END;

$BODY$;